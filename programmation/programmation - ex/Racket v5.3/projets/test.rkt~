(define (absolute x)
  (if (< x 0)
      (- x)
      x))
(define (fact-rec n)
  (if (= n 1)
      1
      (* n
         (fact-rec (- n 1)))))
(define (fact-iter n)
  (define (iteration P cpt max)
    (if (> cpt max)
        P
        (iteration (* P cpt)
                   (+ 1 cpt)
                   max)))
  (iteration 1 2 n))
(define (fib-rec n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib-rec (- n 1))
                 (fib-rec (- n 2))))))
(define (fib-iter n)
  (define (iteration a b cpt)
    (if (= cpt 0)
        b
        (iteration (+ a b) a (- cpt 1))))
  (iteration 1 0 n))
(define (ways-to-finance a)
  (define (wtf a n)
    (define (kind n)
      (cond ((= n 1) 1)
            ((= n 2) 5)
            ((= n 3) 10)
            ((= n 4) 25)
            ((= n 5) 50)))
    (cond ((= a 0) 1)
          ((< a 0) 0)
          ((= n 0) 0)
          (else (+ (wtf a
                        (- n 1))
                   (wtf (- a
                           (kind n))
                        n)))))
  (wtf a 5))
(define (f n)
  (if (< n 3)
      n
      (+ (f (- n 1))
         (f (- n 2))
         (f (- n 3)))))
(define (exp-rec e n)
  (if (= 0 n)
      1
      (* e
         (exp-rec e (- n 1)))))
(define (exp-iter e n)
  (define (iteration e value cpt max)
    (if (> cpt max)
        value
        (iteration e
                   (* e value)
                   (+ cpt 1)
                   max)))
  (iteration e 1 1 n))